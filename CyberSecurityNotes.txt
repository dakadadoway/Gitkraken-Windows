<<<<<<< HEAD
+++++++++++++++++++++++++++++++++++++++++++++++++++++++Terminal Commands+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
cd-change directory-for navigating    ex.  cd_name-of-folder    (DONT USE UPPERCASE)              _ =space 

pwd-present working directory         /Documents/Name/... 

../-go back up one (cd..) 

../../-chaining commands (cd.. Is go back 1, cd../../.. Is go back twice) 

Control Z 

ls (LS)-tells you what's around you and what available to you going forward (can't look backwards) 

DONT USE SPACES 


--------------------------------------------How to open file (DONT USE CAP BUTTON)-------------------------------------------------------

-cd ~/Documents  

-cd Dowayyyy 

-open ‘Doway da best!’ 

-Clear 

-Create a file: touch name

-Create a folder: mkdir name 

-Moving folder or file: mv moving_name place_name/ 

-Rename folder: mv old_name new_name 

-Rename file: cd ~/where the file is located(i.e Documents), then mv old_filename new_filename 

-How to move folders and files into other main folder: 

-~/Downloads $ mv file ../Downloads 

-Write out= save 

-Basic Bash commands (echo, read, etc.) 

-Cd / :root domain 

----------------------------------------------------------Here is a list of some of the most commonly used bash commands: 

-cd: Change the directory to a different location. 

-ls: List the contents of the current directory. 

-mkdir: Create a new directory. 

-touch: Create a new file. 

-rm: Remove a file. 

-rmdir: removes directory 

-Rm –r directory_name  

-cp: Copy a file or directory. 

-mv: Move or rename a file or directory. 

-echo: Print text to the terminal. 

-cat: Concatenate and print the contents of a file. 

-grep: Search for a pattern in a file. 

-chmod: Change the permissions of a file or directory. 

-sudo: Run a command with administrative privileges. 

-df: Display the amount of disk space available. 

-history: Show a list of previously executed commands. 

-ps: Display information about running processes. 

-ls –l (L) gives long list with lots of info 

-Ctrl ; opens emoji selections in nano 

-Pwd = present working directory 

-.sh belongs to shell so the computer knows what we’re trying to open file with (e.i. GIF, PDF,etc) 

==========================================================Git Commands====================================================================

-Initialize Repository: git init 

-Configure Git: git config --global user.name "Your Name" 

git config --global user.email youremail@example.com 

-Check Status: git status 

-Stage Files: git add filename  

git add . 

-Commit Changes: git commit -m "message" 

-View Log: git log 

-Create and Switch Branch: git checkout -b branch-name 

-Switch Branch: git checkout branch-name 

-Merge Branches: git merge branch-name 

-Delete Branch: git branch -d branch-name 

-Undo Changes in Working Directory:  

~Using git restore(newer versions): git restore filename 

~Using git checkout(older versions): git checkout –filename 

-Remove Cached File: git rm --cached filename 

-Set Alias: git config --global alias.alias-name command 

-Tag a Commit: git tag -a v1.0 -m "message" 

-Reset Commits: it reset --soft HEAD~1 

it reset --hard HEAD~1 

______________________________________________________How to download Debian_______________________________________________________

Go to edge, go to setting and then to download, change location to the created folder(debian inside your_name_period) 

Debian 11.x 64-bit  
non-comercial 

20 gb memory 

8 gb ram 

2 cpu(processor) 

--------------------------------------Layers of a operating file---------------------------------

Hardware 
Firmware 
BIOS (Binary Input Output Systems)---------||| 
Kernal                                                            |||      layers of OS (Operating system) 
Shell                                                               |||      

File system                                                     ||| 

-Hardware----->firmware---->Binary Input Output Systems (BIOS)----> (OS-operating system- starts here) Kernal ---->Shell---->File system 

-Binary is also known as “Machine language” and assembly code is a level above “machine language” 

-base layer of programming that exists on every hardware 

-BIOS is the firmware for the mother board, its main job is to check if everything is working
correctly and if not, it will alert. (makes sure everything's turned on) 

Kernal determines the style/architecture of the operating system based on what it's used for.
 Also passes information(messenger/translator) 

-Operating systems: IOS, android, Linux, cisco, Debian, ubuntu, windows, iMac, etc. 
(1000-1200+ system operators) 

-Kali Linux is used for exploitation tools, forensic tools, hardware hacking, information 
gathering, password cracking, reverse engineering, wireless attacks, web applications, 
stress testing, sniffing and spoofing, vulnerability analysis, and many more 


=================================What is bash scripting?==============================

Bash scripting involves writing a series of commands in a plain text file (called a script)
that the Bash interpreter can execute. This allows you to automate tasks, manage system
operations, and perform complex sequences of actions with just a single command.

-------------Basic Components of a Bash Script
Shebang (#!) Line:

The first line in a script that tells the system which interpreter to use. here are some examples
Example:
bash
Copy code
#!/bin/bash
Commands:

The actual instructions you want the script to perform.
Example:
bash
Copy code
echo "Hello, World!"
Comments:

Lines that start with # and are not executed. They help explain the script.
Example:
bash
Copy code
# This is a comment

 Common Bash Commands:
echo: Prints text to the terminal.
Example: echo "Hello, World!" displays Hello, World! on the screen.
cd: Changes the current directory.
Example: cd /home/user/Documents changes to the Documents directory.
ls: Lists files and directories.
Example: ls -l lists files with details like permissions and size.
touch: Creates an empty file.
Example: touch file.txt creates a file named file.txt.
chmod: Changes file permissions.
Example: chmod +x script.sh makes script.sh executable.
if, for, while: Conditional and loop structures for decision-making and iteration.
Example: if [ -f file.txt ]; then echo "File exists"; fi checks if file.txt exists and prints a message.


 How to Write a Bash Script:
Step 1: Create a new file with the .sh extension.
Example: touch myscript.sh
Step 2: Open the file in a text editor (e.g., nano myscript.sh) and start with the shebang line:
#!/bin/bash
This tells the system to use the Bash interpreter to execute the script.






=======
+++++++++++++++++++++++++++++++++++++++++++++++++++++++Terminal Commands+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
cd-change directory-for navigating    ex.  cd_name-of-folder    (DONT USE UPPERCASE)              _ =space 

pwd-present working directory         /Documents/Name/... 

../-go back up one (cd..) 

../../-chaining commands (cd.. Is go back 1, cd../../.. Is go back twice) 

Control Z 

ls (LS)-tells you what's around you and what available to you going forward (can't look backwards) 

DONT USE SPACES 


--------------------------------------------How to open file (DONT USE CAP BUTTON)-------------------------------------------------------

-cd ~/Documents  

-cd Dowayyyy 

-open ‘Doway da best!’ 

-Clear 

-Create a file: touch name

-Create a folder: mkdir name 

-Moving folder or file: mv moving_name place_name/ 

-Rename folder: mv old_name new_name 

-Rename file: cd ~/where the file is located(i.e Documents), then mv old_filename new_filename 

-How to move folders and files into other main folder: 

-~/Downloads $ mv file ../Downloads 

-Write out= save 

-Basic Bash commands (echo, read, etc.) 

-Cd / :root domain 

----------------------------------------------------------Here is a list of some of the most commonly used bash commands: 

-cd: Change the directory to a different location. 

-ls: List the contents of the current directory. 

-mkdir: Create a new directory. 

-touch: Create a new file. 

-rm: Remove a file. 

-rmdir: removes directory 

-Rm –r directory_name  

-cp: Copy a file or directory. 

-mv: Move or rename a file or directory. 

-echo: Print text to the terminal. 

-cat: Concatenate and print the contents of a file. 

-grep: Search for a pattern in a file. 

-chmod: Change the permissions of a file or directory. 

-sudo: Run a command with administrative privileges. 

-df: Display the amount of disk space available. 

-history: Show a list of previously executed commands. 

-ps: Display information about running processes. 

-ls –l (L) gives long list with lots of info 

-Ctrl ; opens emoji selections in nano 

-Pwd = present working directory 

-.sh belongs to shell so the computer knows what we’re trying to open file with (e.i. GIF, PDF,etc) 

==========================================================Git Commands====================================================================

-Initialize Repository: git init 

-Configure Git: git config --global user.name "Your Name" 

git config --global user.email youremail@example.com 

-Check Status: git status 

-Stage Files: git add filename  

git add . 

-Commit Changes: git commit -m "message" 

-View Log: git log 

-Create and Switch Branch: git checkout -b branch-name 

-Switch Branch: git checkout branch-name 

-Merge Branches: git merge branch-name 

-Delete Branch: git branch -d branch-name 

-Undo Changes in Working Directory:  

~Using git restore(newer versions): git restore filename 

~Using git checkout(older versions): git checkout –filename 

-Remove Cached File: git rm --cached filename 

-Set Alias: git config --global alias.alias-name command 

-Tag a Commit: git tag -a v1.0 -m "message" 

-Reset Commits: it reset --soft HEAD~1 

it reset --hard HEAD~1 

______________________________________________________How to download Debian_______________________________________________________

Go to edge, go to setting and then to download, change location to the created folder(debian inside your_name_period) 

Debian 11.x 64-bit  
non-comercial 

20 gb memory 

8 gb ram 

2 cpu(processor) 

 

>>>>>>> origin/main



/////////////////////////////////////////////////////To commit a repository in GitKraken, follow these steps://///////////////////////////////////
Open your repository: Launch GitKraken and open the repository you want to commit to.

Stage your changes:

In the left panel, under the "Unstaged Files" section, you'll see the files with changes.
You can stage all files by clicking the checkbox next to "Unstaged Files" or stage individual files by selecting the checkboxes next to each file.
Write a commit message:

Below the staging area, there's a field to enter your commit message. Write a meaningful message that describes the changes you've made.
Commit the changes:

After staging and writing the commit message, click the Commit Changes button at the bottom of the panel.
Push to the remote repository (optional):

If you want to push your commit to the remote repository, click the Push button (it looks like an upward arrow) on the top toolbar.
 
 
000000000000000000000000000000000000000000000000-System security-000000000000000000000000000000000000000000

System security: Linux
-Keep everyone at Least privilage
-user and group persmission
-Regular updates
-Firefalls
-Strong password policies
-Auditing and logging
-Secure shell (SSH)
-Disable unnecessary services
-Data encryption
-Backup regularely


 